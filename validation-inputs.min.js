const REQUIRED="required",REQUIRED_IF="required_if",PERMIT_EMPTY="permit_empty",REQUIRED_IF_NOT="required_if_not",EMAIL="email",NUMERIC="numeric",IN_LIST="in_list",UNCHECKED="unchecked",LESS_THAN="less_than",MIN_LENGTH="min_length",MAX_LENGTH="max_length",NOT_IN_LIST="not_in_list",GREATER_THAN="greater_than";let input,CLASS_IS_INVALID,errorLog="",finalValid=!0;export function validateRun(e,t="is-invalid"){if(finalValid=!0,CLASS_IS_INVALID=t,errorLog='<ul style="text-align: start;">',removeInvalid(),"object"!=typeof e)return"Rules must be an object";for(const t in e){let n=!0;if(input=document.getElementById(t),input||(n=!1,finalValid=!1,errorLog+=`<li>${t} doesn't exist.</li>`),n){const n=rulesManager(e[t].rules);n.valid||(finalValid=!1,errorLog+=`<li>${e[t].label} -> ${n.err}</li>`)}}return errorLog+="</ul>",{valid:finalValid,msg:errorLog}}function rulesManager(e){const t=e.split("|"),n=t[0];if(!n.includes(REQUIRED_IF+"[")&&n!==PERMIT_EMPTY&&n!==REQUIRED&&!n.includes(REQUIRED_IF_NOT+"["))return{valid:!1,err:"First param of the rule must be if the input is required, permit_empty, required_if, required_if_not."};if(n===REQUIRED&&baseInputEmpty())return is_required();if(n.includes(REQUIRED_IF+"[")){const e=n.match(/\[(.*?)\]/)[1]??"undefined",t=document.getElementById(e);if(!t)return nullInput(e);if(!baseInputEmpty(t)&&baseInputEmpty())return is_required()}if(n.includes(REQUIRED_IF_NOT+"[")){const e=n.match(/\[(.*?)\]/)[1]??"undefined",t=document.getElementById(e);if(!t)return nullInput(e);if(baseInputEmpty(t)&&baseInputEmpty())return is_required()}const i=t.length;if(i>1)for(let e=1;e<i;e++)if(n!==PERMIT_EMPTY||!baseInputEmpty()){const n=extraRules(t[e]);if(!n.valid)return{valid:n.valid,err:n.msg}}return{valid:!0}}function extraRules(e){let t,n,i="",r=!0;const a=e.match(/(\w+)\[(.*?)\]/);if(a?(n=a[2]??"none",t=a[1]??void 0):e===EMAIL?t=EMAIL:e===NUMERIC&&(t=NUMERIC),void 0!==t)switch(t){case IN_LIST:n.split(",").includes(input.value)||(r=!1,i=`must contains ${n}`);break;case NOT_IN_LIST:n.split(",").includes(input.value)&&(r=!1,i=`can't contains ${n}`);break;case MAX_LENGTH:input.value.length>parseInt(n)&&(r=!1,i=`max length must be ${n}`);break;case MIN_LENGTH:input.value.length<parseInt(n)&&(r=!1,i=`min length must be ${n}`);break;case GREATER_THAN:parseInt(input.value)<=parseInt(n)&&(r=!1,i=`must be greater than ${n}`);break;case LESS_THAN:parseInt(input.value)>=parseInt(n)&&(r=!1,i=`must be less than ${n}`);break;case UNCHECKED:const e=n.split(","),t=e.length;for(let a=0;a<t;a++)if(document.getElementById(e[a]).checked){r=!1,i=`${n} must be unchecked`;break}break;case EMAIL:/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/.test(input.value)||(r=!1,i="must be a valid email");break;case NUMERIC:Number.isNaN(parseFloat(input.value))&&(r=!1,i="must be a number")}else r=!1,i="No rule type";return r||addInvalidClass(),{valid:r,msg:i}}function baseInputEmpty(e=null){const t=e??input;return"checkbox"!==t.type?""===t.value:!t.checked}function addInvalidClass(){CLASS_IS_INVALID&&""!==CLASS_IS_INVALID&&input.classList.add(CLASS_IS_INVALID)}function removeInvalid(){if(CLASS_IS_INVALID&&""!==CLASS_IS_INVALID){const e=document.querySelectorAll(`.${CLASS_IS_INVALID}`),t=e.length;for(let n=0;n<t;n++)e[n].classList.remove(CLASS_IS_INVALID)}}function is_required(){return addInvalidClass(),{valid:!1,err:"it's required."}}function nullInput(e){return{valid:!1,err:`${e} not found.`}}