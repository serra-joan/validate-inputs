const REQUIRED="required",REQUIRED_IF="required_if",PERMIT_EMPTY="permit_empty",REQUIRED_IF_NOT="required_if_not",EMAIL="email",NUMERIC="numeric",IN_LIST="in_list",UNCHECKED="unchecked",LENGTH="length",MIN_LENGTH="min_length",MAX_LENGTH="max_length",NOT_IN_LIST="not_in_list",EQUAL_THAN="equal_than",LESS_THAN="less_than",GREATER_THAN="greater_than",DATE="date";let input,CLASS_IS_INVALID,errorLog="",finalValid=!0;export function validateRun(e,t="is-invalid"){if(finalValid=!0,CLASS_IS_INVALID=t,errorLog='<ul style="text-align: start;">',removeInvalid(),"object"!=typeof e)return"Rules must be an object";for(const t in e){let n=!0;if(input=document.getElementById(t),input||(n=!1,finalValid=!1,errorLog+=`<li>${t} doesn't exist.</li>`),n){const n=rulesManager(e[t].rules);n.valid||(finalValid=!1,errorLog+=`<li>${e[t].label} -> ${n.err}</li>`)}}return errorLog+="</ul>",{valid:finalValid,msg:errorLog}}function rulesManager(e){const t=e.split("|"),n=t[0];if(!n.includes(REQUIRED_IF+"[")&&n!==PERMIT_EMPTY&&n!==REQUIRED&&!n.includes(REQUIRED_IF_NOT+"["))return{valid:!1,err:"First param of the rule must be: required, permit_empty, required_if, required_if_not."};if(n===REQUIRED&&baseInputEmpty())return is_required();if(n.includes(REQUIRED_IF+"[")){const e=n.match(/\[(.*?)\]/)[1]??"undefined",t=document.getElementById(e);if(!t)return nullInput(e);if(!baseInputEmpty(t)&&baseInputEmpty())return is_required()}if(n.includes(REQUIRED_IF_NOT+"[")){const e=n.match(/\[(.*?)\]/)[1]??"undefined",t=document.getElementById(e);if(!t)return nullInput(e);if(baseInputEmpty(t)&&baseInputEmpty())return is_required()}const a=t.length;if(a>1)for(let e=1;e<a;e++)if(n!==PERMIT_EMPTY||!baseInputEmpty()){const n=extraRules(t[e]);if(!n.valid)return{valid:n.valid,err:n.msg}}return{valid:!0}}function extraRules(e){let t,n,a="",i=!0;const r=e.match(/(\w+)\[(.*?)\]/);if(r?(n=r[2]??"none",t=r[1]??void 0):e===EMAIL?t=EMAIL:e===NUMERIC?t=NUMERIC:e===UNCHECKED?t=UNCHECKED:e===DATE&&(t=DATE),void 0!==t)switch(t){case IN_LIST:n.split(",").includes(input.value)||(i=!1,a=`must contains ${n}`);break;case NOT_IN_LIST:n.split(",").includes(input.value)&&(i=!1,a=`can't contains ${n}`);break;case LENGTH:input.value.length!==parseInt(n)&&(i=!1,a=`length must be exactly ${n}`);break;case MAX_LENGTH:input.value.length>parseInt(n)&&(i=!1,a=`max length must be ${n}`);break;case MIN_LENGTH:input.value.length<parseInt(n)&&(i=!1,a=`min length must be ${n}`);break;case EQUAL_THAN:parseFloat(input.value)!==parseFloat(n)&&(i=!1,a=`must be equal than ${n}`);break;case GREATER_THAN:parseFloat(input.value)<=parseFloat(n)&&(i=!1,a=`must be greater than ${n}`);break;case LESS_THAN:parseFloat(input.value)>=parseFloat(n)&&(i=!1,a=`must be less than ${n}`);break;case UNCHECKED:input.checked&&(i=!1,a="must be unchecked");break;case EMAIL:/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/.test(input.value)||(i=!1,a="must be a valid email");break;case NUMERIC:Number.isNaN(parseFloat(input.value))&&(i=!1,a="must be a number");break;case DATE:const e=new Date(input.value);isNaN(e.getTime())&&(i=!1,a="must be a valid date")}else i=!1,a="No rule type";return i||addInvalidClass(),{valid:i,msg:a}}function baseInputEmpty(e=null){const t=e??input;return"checkbox"!==t.type?""===t.value:!t.checked}function addInvalidClass(){CLASS_IS_INVALID&&""!==CLASS_IS_INVALID&&input.classList.add(CLASS_IS_INVALID)}function removeInvalid(){if(CLASS_IS_INVALID&&""!==CLASS_IS_INVALID){const e=document.querySelectorAll(`.${CLASS_IS_INVALID}`),t=e.length;for(let n=0;n<t;n++)e[n].classList.remove(CLASS_IS_INVALID)}}function is_required(){return addInvalidClass(),{valid:!1,err:"it's required."}}function nullInput(e){return{valid:!1,err:`${e} not found.`}}